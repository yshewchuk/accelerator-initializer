plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'org.springframework.boot' version '1.5.18.RELEASE'
    id 'maven-publish'
}

description 'Accelerator initializer - project generation API'
group = 'com.scotiabank'
version = '0.1'
sourceCompatibility = 1.8

repositories {
    jcenter()
}

ext {
    lombokVersion = '1.18.2'
    springfoxSwaggerVersion = '2.9.2'
}

sourceSets {
    integrationTest {
        resources {
            srcDirs 'src/integrationTest/resources'
        }
        java {
            compileClasspath += main.compileClasspath + main.output
            runtimeClasspath += main.runtimeClasspath
            srcDirs 'src/integrationTest/java'
        }
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.7'
    compile 'org.springframework.boot:spring-boot-starter-mustache'
    compile 'org.springframework.boot:spring-boot-starter-actuator'

    compile "io.springfox:springfox-swagger2:$springfoxSwaggerVersion"
    constraints {
        implementation("com.google.guava:guava:26.0-jre") {
            because "previous versions contain a bug"
        }
    }

    compile "io.springfox:springfox-swagger-ui:$springfoxSwaggerVersion"
    constraints {
        implementation("com.google.guava:guava:26.0-jre") {
            because "previous versions contain a bug"
        }
    }

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'com.jayway.jsonpath:json-path'
    testCompile 'com.jayway.jsonpath:json-path-assert'
    integrationTestCompile 'org.springframework.boot:spring-boot-starter-test'
}

jar {
    manifest {
        attributes 'Implementation-Title': project.description,
                'Implementation-Version': project.version
    }
}

jacoco {
    toolVersion "0.8.1"
}

jacocoTestReport {
    reports {
        csv.enabled = false
        xml.enabled = false
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = "BUNDLE"

            limit {
                counter = "INSTRUCTION"
                minimum = 0.38
            }

            limit {
                counter = "BRANCH"
                minimum = 0.03
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification

task integrationTest (type: Test) {
    group 'verification'
    description 'Runs the integration tests'

    classpath = sourceSets.integrationTest.runtimeClasspath
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
}
integrationTest.dependsOn compileIntegrationTestJava

task jacocoIntegrationTestReport (type: JacocoReport, dependsOn: integrationTest) {
    group = "verification"
    description = "Generate Jacoco coverage reports after running integration tests."

    executionData integrationTest
    sourceDirectories = files(sourceSets.main.java.srcDirs)
    classDirectories = files(sourceSets.main.output.classesDirs)

    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination file("${buildDir}/reports/jacoco/integrationTest/html")
    }
}

task jacocoIntegrationTestCoverageVerification (type: JacocoCoverageVerification, dependsOn: integrationTest) {
    group = "verification"
    description = "Verifies code coverage on the integration tests."

    executionData integrationTest
    sourceDirectories = files(sourceSets.main.java.srcDirs)
    classDirectories = files(sourceSets.main.output.classesDir)

    violationRules {
        rule {
            element = "BUNDLE"

            limit {
                counter = "INSTRUCTION"
                minimum = 0.90
            }

            limit {
                counter = "BRANCH"
                minimum = 0.69
            }
        }
    }
}
check.dependsOn jacocoIntegrationTestCoverageVerification

task sourceJar(type: Jar) {
    classifier "sources"
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact jar
            artifact sourceJar

            pom {
                name = 'Accelerator Initializer'
                description = project.description
                url = 'https://github.com/scotiabank/accelerator-initializer'
                licenses {
                    license {
                        name = 'Mozilla Public License 2.0'
                        url = 'https://www.mozilla.org/en-US/MPL/2.0/'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/scotiabank/accelerator-initializer.git'
                    url = 'https://github.com/scotiabank/accelerator-initializer'
                }
            }
        }
    }
}

task prepareForPublish(dependsOn: ['jar', 'sourceJar', 'generatePomFileForMavenPublication']) {

}